{"ast":null,"code":"'use strict';\n\nconst walker = require('walker');\n\nconst anymatch = require('anymatch');\n\nconst micromatch = require('micromatch');\n\nconst path = require('path');\n\nconst platform = require('os').platform();\n/**\n * Constants\n */\n\n\nexports.DEFAULT_DELAY = 100;\nexports.CHANGE_EVENT = 'change';\nexports.DELETE_EVENT = 'delete';\nexports.ADD_EVENT = 'add';\nexports.ALL_EVENT = 'all';\n/**\n * Assigns options to the watcher.\n *\n * @param {NodeWatcher|PollWatcher|WatchmanWatcher} watcher\n * @param {?object} opts\n * @return {boolean}\n * @public\n */\n\nexports.assignOptions = function (watcher, opts) {\n  opts = opts || {};\n  watcher.globs = opts.glob || [];\n  watcher.dot = opts.dot || false;\n  watcher.ignored = opts.ignored || false;\n\n  if (!Array.isArray(watcher.globs)) {\n    watcher.globs = [watcher.globs];\n  }\n\n  watcher.hasIgnore = Boolean(opts.ignored) && !(Array.isArray(opts) && opts.length > 0);\n  watcher.doIgnore = opts.ignored ? anymatch(opts.ignored) : () => false;\n\n  if (opts.watchman && opts.watchmanPath) {\n    watcher.watchmanPath = opts.watchmanPath;\n  }\n\n  return opts;\n};\n/**\n * Checks a file relative path against the globs array.\n *\n * @param {array} globs\n * @param {string} relativePath\n * @return {boolean}\n * @public\n */\n\n\nexports.isFileIncluded = function (globs, dot, doIgnore, relativePath) {\n  if (doIgnore(relativePath)) {\n    return false;\n  }\n\n  return globs.length ? micromatch.some(relativePath, globs, {\n    dot: dot\n  }) : dot || micromatch.some(relativePath, '**/*');\n};\n/**\n * Traverse a directory recursively calling `callback` on every directory.\n *\n * @param {string} dir\n * @param {function} dirCallback\n * @param {function} fileCallback\n * @param {function} endCallback\n * @param {*} ignored\n * @public\n */\n\n\nexports.recReaddir = function (dir, dirCallback, fileCallback, endCallback, errorCallback, ignored) {\n  walker(dir).filterDir(currentDir => !anymatch(ignored, currentDir)).on('dir', normalizeProxy(dirCallback)).on('file', normalizeProxy(fileCallback)).on('error', errorCallback).on('end', () => {\n    if (platform === 'win32') {\n      setTimeout(endCallback, 1000);\n    } else {\n      endCallback();\n    }\n  });\n};\n/**\n * Returns a callback that when called will normalize a path and call the\n * original callback\n *\n * @param {function} callback\n * @return {function}\n * @private\n */\n\n\nfunction normalizeProxy(callback) {\n  return (filepath, stats) => callback(path.normalize(filepath), stats);\n}","map":{"version":3,"sources":["/home/epitech/Documents/e-commerce/client/node_modules/sane/src/common.js"],"names":["walker","require","anymatch","micromatch","path","platform","exports","DEFAULT_DELAY","CHANGE_EVENT","DELETE_EVENT","ADD_EVENT","ALL_EVENT","assignOptions","watcher","opts","globs","glob","dot","ignored","Array","isArray","hasIgnore","Boolean","length","doIgnore","watchman","watchmanPath","isFileIncluded","relativePath","some","recReaddir","dir","dirCallback","fileCallback","endCallback","errorCallback","filterDir","currentDir","on","normalizeProxy","setTimeout","callback","filepath","stats","normalize"],"mappings":"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","sourcesContent":["'use strict';\n\nconst walker = require('walker');\nconst anymatch = require('anymatch');\nconst micromatch = require('micromatch');\nconst path = require('path');\nconst platform = require('os').platform();\n\n/**\n * Constants\n */\n\nexports.DEFAULT_DELAY = 100;\nexports.CHANGE_EVENT = 'change';\nexports.DELETE_EVENT = 'delete';\nexports.ADD_EVENT = 'add';\nexports.ALL_EVENT = 'all';\n\n/**\n * Assigns options to the watcher.\n *\n * @param {NodeWatcher|PollWatcher|WatchmanWatcher} watcher\n * @param {?object} opts\n * @return {boolean}\n * @public\n */\n\nexports.assignOptions = function(watcher, opts) {\n  opts = opts || {};\n  watcher.globs = opts.glob || [];\n  watcher.dot = opts.dot || false;\n  watcher.ignored = opts.ignored || false;\n\n  if (!Array.isArray(watcher.globs)) {\n    watcher.globs = [watcher.globs];\n  }\n  watcher.hasIgnore =\n    Boolean(opts.ignored) && !(Array.isArray(opts) && opts.length > 0);\n  watcher.doIgnore = opts.ignored ? anymatch(opts.ignored) : () => false;\n\n  if (opts.watchman && opts.watchmanPath) {\n    watcher.watchmanPath = opts.watchmanPath;\n  }\n\n  return opts;\n};\n\n/**\n * Checks a file relative path against the globs array.\n *\n * @param {array} globs\n * @param {string} relativePath\n * @return {boolean}\n * @public\n */\n\nexports.isFileIncluded = function(globs, dot, doIgnore, relativePath) {\n  if (doIgnore(relativePath)) {\n    return false;\n  }\n  return globs.length\n    ? micromatch.some(relativePath, globs, { dot: dot })\n    : dot || micromatch.some(relativePath, '**/*');\n};\n\n/**\n * Traverse a directory recursively calling `callback` on every directory.\n *\n * @param {string} dir\n * @param {function} dirCallback\n * @param {function} fileCallback\n * @param {function} endCallback\n * @param {*} ignored\n * @public\n */\n\nexports.recReaddir = function(\n  dir,\n  dirCallback,\n  fileCallback,\n  endCallback,\n  errorCallback,\n  ignored\n) {\n  walker(dir)\n    .filterDir(currentDir => !anymatch(ignored, currentDir))\n    .on('dir', normalizeProxy(dirCallback))\n    .on('file', normalizeProxy(fileCallback))\n    .on('error', errorCallback)\n    .on('end', () => {\n      if (platform === 'win32') {\n        setTimeout(endCallback, 1000);\n      } else {\n        endCallback();\n      }\n    });\n};\n\n/**\n * Returns a callback that when called will normalize a path and call the\n * original callback\n *\n * @param {function} callback\n * @return {function}\n * @private\n */\n\nfunction normalizeProxy(callback) {\n  return (filepath, stats) => callback(path.normalize(filepath), stats);\n}\n"]},"metadata":{},"sourceType":"script"}