{"ast":null,"code":"var RSVP = require('rsvp');\n\nvar exit;\nvar handlers = [];\nvar lastTime;\nvar isExiting = false;\nprocess.on('beforeExit', function (code) {\n  if (handlers.length === 0) {\n    return;\n  }\n\n  var own = lastTime = module.exports._flush(lastTime, code).finally(function () {\n    // if an onExit handler has called process.exit, do not disturb\n    // `lastTime`.\n    //\n    // Otherwise, clear `lastTime` so that we know to synchronously call the\n    // real `process.exit` with the given exit code, when our captured\n    // `process.exit` is called during a `process.on('exit')` handler\n    //\n    // This is impossible to reason about, don't feel bad.  Just look at\n    // test-natural-exit-subprocess-error.js\n    if (own === lastTime) {\n      lastTime = undefined;\n    }\n  });\n}); // This exists only for testing\n\nmodule.exports._reset = function () {\n  module.exports.releaseExit();\n  handlers = [];\n  lastTime = undefined;\n  isExiting = false;\n  firstExitCode = undefined;\n};\n/*\n * To allow cooperative async exit handlers, we unfortunately must hijack\n * process.exit.\n *\n * It allows a handler to ensure exit, without that exit handler impeding other\n * similar handlers\n *\n * for example, see: https://github.com/sindresorhus/ora/issues/27\n *\n */\n\n\nmodule.exports.releaseExit = function () {\n  if (exit) {\n    process.exit = exit;\n    exit = null;\n  }\n};\n\nvar firstExitCode;\n\nmodule.exports.captureExit = function () {\n  if (exit) {\n    // already captured, no need to do more work\n    return;\n  }\n\n  exit = process.exit;\n\n  process.exit = function (code) {\n    if (handlers.length === 0 && lastTime === undefined) {\n      // synchronously exit.\n      //\n      // We do this brecause either\n      //\n      //  1.  The process exited due to a call to `process.exit` but we have no\n      //      async work to do because no handlers had been attached.  It\n      //      doesn't really matter whether we take this branch or not in this\n      //      case.\n      //\n      //  2.  The process exited naturally.  We did our async work during\n      //      `beforeExit` and are in this function because someone else has\n      //      called `process.exit` during an `on('exit')` hook.  The only way\n      //      for us to preserve the exit code in this case is to exit\n      //      synchronously.\n      //\n      return exit.call(process, code);\n    }\n\n    if (firstExitCode === undefined) {\n      firstExitCode = code;\n    }\n\n    var own = lastTime = module.exports._flush(lastTime, firstExitCode).then(function () {\n      // if another chain has started, let it exit\n      if (own !== lastTime) {\n        return;\n      }\n\n      exit.call(process, firstExitCode);\n    }).catch(function (error) {\n      // if another chain has started, let it exit\n      if (own !== lastTime) {\n        throw error;\n      }\n\n      console.error(error);\n      exit.call(process, 1);\n    });\n  };\n};\n\nmodule.exports._handlers = handlers;\n\nmodule.exports._flush = function (lastTime, code) {\n  isExiting = true;\n  var work = handlers.splice(0, handlers.length);\n  return RSVP.Promise.resolve(lastTime).then(function () {\n    var firstRejected;\n    return RSVP.allSettled(work.map(function (handler) {\n      return RSVP.resolve(handler.call(null, code)).catch(function (e) {\n        if (!firstRejected) {\n          firstRejected = e;\n        }\n\n        throw e;\n      });\n    })).then(function (results) {\n      if (firstRejected) {\n        throw firstRejected;\n      }\n    });\n  });\n};\n\nmodule.exports.onExit = function (cb) {\n  if (!exit) {\n    throw new Error('Cannot install handler when exit is not captured.  Call `captureExit()` first');\n  }\n\n  if (isExiting) {\n    throw new Error('Cannot install handler while `onExit` handlers are running.');\n  }\n\n  var index = handlers.indexOf(cb);\n\n  if (index > -1) {\n    return;\n  }\n\n  handlers.push(cb);\n};\n\nmodule.exports.offExit = function (cb) {\n  var index = handlers.indexOf(cb);\n\n  if (index < 0) {\n    return;\n  }\n\n  handlers.splice(index, 1);\n};\n\nmodule.exports.exit = function () {\n  exit.apply(process, arguments);\n};\n\nmodule.exports.listenerCount = function () {\n  return handlers.length;\n};","map":{"version":3,"sources":["/home/epitech/Documents/e-commerce/client/node_modules/capture-exit/index.js"],"names":["RSVP","require","exit","handlers","lastTime","isExiting","process","on","code","length","own","module","exports","_flush","finally","undefined","_reset","releaseExit","firstExitCode","captureExit","call","then","catch","error","console","_handlers","work","splice","Promise","resolve","firstRejected","allSettled","map","handler","e","results","onExit","cb","Error","index","indexOf","push","offExit","apply","arguments","listenerCount"],"mappings":"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","sourcesContent":["var RSVP = require('rsvp');\n\nvar exit;\nvar handlers = [];\nvar lastTime;\nvar isExiting = false;\n\nprocess.on('beforeExit', function (code) {\n  if (handlers.length === 0) { return; }\n\n  var own = lastTime = module.exports._flush(lastTime, code)\n    .finally(function () {\n      // if an onExit handler has called process.exit, do not disturb\n      // `lastTime`.\n      //\n      // Otherwise, clear `lastTime` so that we know to synchronously call the\n      // real `process.exit` with the given exit code, when our captured\n      // `process.exit` is called during a `process.on('exit')` handler\n      //\n      // This is impossible to reason about, don't feel bad.  Just look at\n      // test-natural-exit-subprocess-error.js\n      if (own === lastTime) {\n        lastTime = undefined;\n      }\n    });\n});\n\n// This exists only for testing\nmodule.exports._reset = function () {\n  module.exports.releaseExit();\n  handlers = [];\n  lastTime = undefined;\n  isExiting = false;\n  firstExitCode = undefined;\n}\n\n/*\n * To allow cooperative async exit handlers, we unfortunately must hijack\n * process.exit.\n *\n * It allows a handler to ensure exit, without that exit handler impeding other\n * similar handlers\n *\n * for example, see: https://github.com/sindresorhus/ora/issues/27\n *\n */\nmodule.exports.releaseExit = function() {\n  if (exit) {\n    process.exit = exit;\n    exit = null;\n  }\n};\n\nvar firstExitCode;\n\nmodule.exports.captureExit = function() {\n  if (exit) {\n    // already captured, no need to do more work\n    return;\n  }\n  exit = process.exit;\n\n  process.exit = function(code) {\n    if (handlers.length === 0 && lastTime === undefined) {\n      // synchronously exit.\n      //\n      // We do this brecause either\n      //\n      //  1.  The process exited due to a call to `process.exit` but we have no\n      //      async work to do because no handlers had been attached.  It\n      //      doesn't really matter whether we take this branch or not in this\n      //      case.\n      //\n      //  2.  The process exited naturally.  We did our async work during\n      //      `beforeExit` and are in this function because someone else has\n      //      called `process.exit` during an `on('exit')` hook.  The only way\n      //      for us to preserve the exit code in this case is to exit\n      //      synchronously.\n      //\n      return exit.call(process, code);\n    }\n\n    if (firstExitCode === undefined) {\n      firstExitCode = code;\n    }\n    var own = lastTime = module.exports._flush(lastTime, firstExitCode)\n      .then(function() {\n        // if another chain has started, let it exit\n        if (own !== lastTime) { return; }\n        exit.call(process, firstExitCode);\n      })\n      .catch(function(error) {\n        // if another chain has started, let it exit\n        if (own !== lastTime) {\n          throw error;\n        }\n        console.error(error);\n        exit.call(process, 1);\n      });\n  };\n};\n\nmodule.exports._handlers = handlers;\nmodule.exports._flush = function(lastTime, code) {\n  isExiting = true;\n  var work = handlers.splice(0, handlers.length);\n\n  return RSVP.Promise.resolve(lastTime).\n    then(function() {\n      var firstRejected;\n      return RSVP.allSettled(work.map(function(handler) {\n        return RSVP.resolve(handler.call(null, code)).catch(function(e) {\n          if (!firstRejected) {\n            firstRejected = e;\n          }\n          throw e;\n        });\n      })).then(function(results) {\n        if (firstRejected) {\n          throw firstRejected;\n        }\n      });\n    });\n};\n\nmodule.exports.onExit = function(cb) {\n  if (!exit) {\n    throw new Error('Cannot install handler when exit is not captured.  Call `captureExit()` first');\n  }\n  if (isExiting) {\n    throw new Error('Cannot install handler while `onExit` handlers are running.');\n  }\n  var index = handlers.indexOf(cb);\n\n  if (index > -1) { return; }\n  handlers.push(cb);\n};\n\nmodule.exports.offExit = function(cb) {\n  var index = handlers.indexOf(cb);\n\n  if (index < 0) { return; }\n\n  handlers.splice(index, 1);\n};\n\nmodule.exports.exit  = function() {\n  exit.apply(process, arguments);\n};\n\nmodule.exports.listenerCount = function() {\n  return handlers.length;\n};\n"]},"metadata":{},"sourceType":"script"}