{"ast":null,"code":"'use strict';\n\nvar micromatch = require('micromatch');\n\nvar normalize = require('normalize-path');\n\nvar path = require('path'); // required for tests.\n\n\nvar arrify = function (a) {\n  return a == null ? [] : Array.isArray(a) ? a : [a];\n};\n\nvar anymatch = function (criteria, value, returnIndex, startIndex, endIndex) {\n  criteria = arrify(criteria);\n  value = arrify(value);\n\n  if (arguments.length === 1) {\n    return anymatch.bind(null, criteria.map(function (criterion) {\n      return typeof criterion === 'string' && criterion[0] !== '!' ? micromatch.matcher(criterion) : criterion;\n    }));\n  }\n\n  startIndex = startIndex || 0;\n  var string = value[0];\n  var altString, altValue;\n  var matched = false;\n  var matchIndex = -1;\n\n  function testCriteria(criterion, index) {\n    var result;\n\n    switch (Object.prototype.toString.call(criterion)) {\n      case '[object String]':\n        result = string === criterion || altString && altString === criterion;\n        result = result || micromatch.isMatch(string, criterion);\n        break;\n\n      case '[object RegExp]':\n        result = criterion.test(string) || altString && criterion.test(altString);\n        break;\n\n      case '[object Function]':\n        result = criterion.apply(null, value);\n        result = result || altValue && criterion.apply(null, altValue);\n        break;\n\n      default:\n        result = false;\n    }\n\n    if (result) {\n      matchIndex = index + startIndex;\n    }\n\n    return result;\n  }\n\n  var crit = criteria;\n  var negGlobs = crit.reduce(function (arr, criterion, index) {\n    if (typeof criterion === 'string' && criterion[0] === '!') {\n      if (crit === criteria) {\n        // make a copy before modifying\n        crit = crit.slice();\n      }\n\n      crit[index] = null;\n      arr.push(criterion.substr(1));\n    }\n\n    return arr;\n  }, []);\n\n  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {\n    if (path.sep === '\\\\' && typeof string === 'string') {\n      altString = normalize(string);\n      altString = altString === string ? null : altString;\n      if (altString) altValue = [altString].concat(value.slice(1));\n    }\n\n    matched = crit.slice(startIndex, endIndex).some(testCriteria);\n  }\n\n  return returnIndex === true ? matchIndex : matched;\n};\n\nmodule.exports = anymatch;","map":{"version":3,"sources":["/home/epitech/Documents/e-commerce/client/node_modules/sane/node_modules/anymatch/index.js"],"names":["micromatch","require","normalize","path","arrify","a","Array","isArray","anymatch","criteria","value","returnIndex","startIndex","endIndex","arguments","length","bind","map","criterion","matcher","string","altString","altValue","matched","matchIndex","testCriteria","index","result","Object","prototype","toString","call","isMatch","test","apply","crit","negGlobs","reduce","arr","slice","push","substr","any","sep","concat","some","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar micromatch = require('micromatch');\nvar normalize = require('normalize-path');\nvar path = require('path'); // required for tests.\nvar arrify = function(a) { return a == null ? [] : (Array.isArray(a) ? a : [a]); };\n\nvar anymatch = function(criteria, value, returnIndex, startIndex, endIndex) {\n  criteria = arrify(criteria);\n  value = arrify(value);\n  if (arguments.length === 1) {\n    return anymatch.bind(null, criteria.map(function(criterion) {\n      return typeof criterion === 'string' && criterion[0] !== '!' ?\n        micromatch.matcher(criterion) : criterion;\n    }));\n  }\n  startIndex = startIndex || 0;\n  var string = value[0];\n  var altString, altValue;\n  var matched = false;\n  var matchIndex = -1;\n  function testCriteria(criterion, index) {\n    var result;\n    switch (Object.prototype.toString.call(criterion)) {\n    case '[object String]':\n      result = string === criterion || altString && altString === criterion;\n      result = result || micromatch.isMatch(string, criterion);\n      break;\n    case '[object RegExp]':\n      result = criterion.test(string) || altString && criterion.test(altString);\n      break;\n    case '[object Function]':\n      result = criterion.apply(null, value);\n      result = result || altValue && criterion.apply(null, altValue);\n      break;\n    default:\n      result = false;\n    }\n    if (result) {\n      matchIndex = index + startIndex;\n    }\n    return result;\n  }\n  var crit = criteria;\n  var negGlobs = crit.reduce(function(arr, criterion, index) {\n    if (typeof criterion === 'string' && criterion[0] === '!') {\n      if (crit === criteria) {\n        // make a copy before modifying\n        crit = crit.slice();\n      }\n      crit[index] = null;\n      arr.push(criterion.substr(1));\n    }\n    return arr;\n  }, []);\n  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {\n    if (path.sep === '\\\\' && typeof string === 'string') {\n      altString = normalize(string);\n      altString = altString === string ? null : altString;\n      if (altString) altValue = [altString].concat(value.slice(1));\n    }\n    matched = crit.slice(startIndex, endIndex).some(testCriteria);\n  }\n  return returnIndex === true ? matchIndex : matched;\n};\n\nmodule.exports = anymatch;\n"]},"metadata":{},"sourceType":"script"}