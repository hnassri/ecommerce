{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\n\nvar _isRegExpSupported = _interopRequireDefault(require('./isRegExpSupported'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Negative look behind is only supported in Node 9+\n\n\nconst NOT_A_DOT = (0, _isRegExpSupported.default)('(?<!\\\\.\\\\s*)') ? '(?<!\\\\.\\\\s*)' : '(?:^|[^.]\\\\s*)';\n\nconst CAPTURE_STRING_LITERAL = pos => `([\\`'\"])([^'\"\\`]*?)(?:\\\\${pos})`;\n\nconst WORD_SEPARATOR = '\\\\b';\nconst LEFT_PARENTHESIS = '\\\\(';\nconst RIGHT_PARENTHESIS = '\\\\)';\nconst WHITESPACE = '\\\\s*';\nconst OPTIONAL_COMMA = '(:?,\\\\s*)?';\n\nfunction createRegExp(parts, flags) {\n  return new RegExp(parts.join(''), flags);\n}\n\nfunction alternatives(...parts) {\n  return `(?:${parts.join('|')})`;\n}\n\nfunction functionCallStart(...names) {\n  return [NOT_A_DOT, WORD_SEPARATOR, alternatives(...names), WHITESPACE, LEFT_PARENTHESIS, WHITESPACE];\n}\n\nconst BLOCK_COMMENT_RE = /\\/\\*[^]*?\\*\\//g;\nconst LINE_COMMENT_RE = /\\/\\/.*/g;\nconst REQUIRE_OR_DYNAMIC_IMPORT_RE = createRegExp([...functionCallStart('require', 'import'), CAPTURE_STRING_LITERAL(1), WHITESPACE, OPTIONAL_COMMA, RIGHT_PARENTHESIS], 'g');\nconst IMPORT_OR_EXPORT_RE = createRegExp(['\\\\b(?:import|export)\\\\s+(?!type(?:of)?\\\\s+)(?:[^\\'\"]+\\\\s+from\\\\s+)?', CAPTURE_STRING_LITERAL(1)], 'g');\nconst JEST_EXTENSIONS_RE = createRegExp([...functionCallStart('jest\\\\s*\\\\.\\\\s*(?:requireActual|requireMock|genMockFromModule|createMockFromModule)'), CAPTURE_STRING_LITERAL(1), WHITESPACE, OPTIONAL_COMMA, RIGHT_PARENTHESIS], 'g');\n\nfunction extract(code) {\n  const dependencies = new Set();\n\n  const addDependency = (match, _, dep) => {\n    dependencies.add(dep);\n    return match;\n  };\n\n  code.replace(BLOCK_COMMENT_RE, '').replace(LINE_COMMENT_RE, '').replace(IMPORT_OR_EXPORT_RE, addDependency).replace(REQUIRE_OR_DYNAMIC_IMPORT_RE, addDependency).replace(JEST_EXTENSIONS_RE, addDependency);\n  return dependencies;\n}","map":{"version":3,"sources":["/home/epitech/Documents/e-commerce/client/node_modules/jest-haste-map/build/lib/dependencyExtractor.js"],"names":["Object","defineProperty","exports","value","extract","_isRegExpSupported","_interopRequireDefault","require","obj","__esModule","default","NOT_A_DOT","CAPTURE_STRING_LITERAL","pos","WORD_SEPARATOR","LEFT_PARENTHESIS","RIGHT_PARENTHESIS","WHITESPACE","OPTIONAL_COMMA","createRegExp","parts","flags","RegExp","join","alternatives","functionCallStart","names","BLOCK_COMMENT_RE","LINE_COMMENT_RE","REQUIRE_OR_DYNAMIC_IMPORT_RE","IMPORT_OR_EXPORT_RE","JEST_EXTENSIONS_RE","code","dependencies","Set","addDependency","match","_","dep","add","replace"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,kBAAkB,GAAGC,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA/C;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAACE,IAAAA,OAAO,EAAEF;AAAV,GAArC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,SAAS,GAAG,CAAC,GAAGN,kBAAkB,CAACK,OAAvB,EAAgC,cAAhC,IACd,cADc,GAEd,gBAFJ;;AAIA,MAAME,sBAAsB,GAAGC,GAAG,IAAK,2BAA0BA,GAAI,GAArE;;AAEA,MAAMC,cAAc,GAAG,KAAvB;AACA,MAAMC,gBAAgB,GAAG,KAAzB;AACA,MAAMC,iBAAiB,GAAG,KAA1B;AACA,MAAMC,UAAU,GAAG,MAAnB;AACA,MAAMC,cAAc,GAAG,YAAvB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClC,SAAO,IAAIC,MAAJ,CAAWF,KAAK,CAACG,IAAN,CAAW,EAAX,CAAX,EAA2BF,KAA3B,CAAP;AACD;;AAED,SAASG,YAAT,CAAsB,GAAGJ,KAAzB,EAAgC;AAC9B,SAAQ,MAAKA,KAAK,CAACG,IAAN,CAAW,GAAX,CAAgB,GAA7B;AACD;;AAED,SAASE,iBAAT,CAA2B,GAAGC,KAA9B,EAAqC;AACnC,SAAO,CACLf,SADK,EAELG,cAFK,EAGLU,YAAY,CAAC,GAAGE,KAAJ,CAHP,EAILT,UAJK,EAKLF,gBALK,EAMLE,UANK,CAAP;AAQD;;AAED,MAAMU,gBAAgB,GAAG,gBAAzB;AACA,MAAMC,eAAe,GAAG,SAAxB;AACA,MAAMC,4BAA4B,GAAGV,YAAY,CAC/C,CACE,GAAGM,iBAAiB,CAAC,SAAD,EAAY,QAAZ,CADtB,EAEEb,sBAAsB,CAAC,CAAD,CAFxB,EAGEK,UAHF,EAIEC,cAJF,EAKEF,iBALF,CAD+C,EAQ/C,GAR+C,CAAjD;AAUA,MAAMc,mBAAmB,GAAGX,YAAY,CACtC,CACE,qEADF,EAEEP,sBAAsB,CAAC,CAAD,CAFxB,CADsC,EAKtC,GALsC,CAAxC;AAOA,MAAMmB,kBAAkB,GAAGZ,YAAY,CACrC,CACE,GAAGM,iBAAiB,CAClB,qFADkB,CADtB,EAIEb,sBAAsB,CAAC,CAAD,CAJxB,EAKEK,UALF,EAMEC,cANF,EAOEF,iBAPF,CADqC,EAUrC,GAVqC,CAAvC;;AAaA,SAASZ,OAAT,CAAiB4B,IAAjB,EAAuB;AACrB,QAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;;AAEA,QAAMC,aAAa,GAAG,CAACC,KAAD,EAAQC,CAAR,EAAWC,GAAX,KAAmB;AACvCL,IAAAA,YAAY,CAACM,GAAb,CAAiBD,GAAjB;AACA,WAAOF,KAAP;AACD,GAHD;;AAKAJ,EAAAA,IAAI,CACDQ,OADH,CACWb,gBADX,EAC6B,EAD7B,EAEGa,OAFH,CAEWZ,eAFX,EAE4B,EAF5B,EAGGY,OAHH,CAGWV,mBAHX,EAGgCK,aAHhC,EAIGK,OAJH,CAIWX,4BAJX,EAIyCM,aAJzC,EAKGK,OALH,CAKWT,kBALX,EAK+BI,aAL/B;AAMA,SAAOF,YAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.extract = extract;\n\nvar _isRegExpSupported = _interopRequireDefault(require('./isRegExpSupported'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// Negative look behind is only supported in Node 9+\nconst NOT_A_DOT = (0, _isRegExpSupported.default)('(?<!\\\\.\\\\s*)')\n  ? '(?<!\\\\.\\\\s*)'\n  : '(?:^|[^.]\\\\s*)';\n\nconst CAPTURE_STRING_LITERAL = pos => `([\\`'\"])([^'\"\\`]*?)(?:\\\\${pos})`;\n\nconst WORD_SEPARATOR = '\\\\b';\nconst LEFT_PARENTHESIS = '\\\\(';\nconst RIGHT_PARENTHESIS = '\\\\)';\nconst WHITESPACE = '\\\\s*';\nconst OPTIONAL_COMMA = '(:?,\\\\s*)?';\n\nfunction createRegExp(parts, flags) {\n  return new RegExp(parts.join(''), flags);\n}\n\nfunction alternatives(...parts) {\n  return `(?:${parts.join('|')})`;\n}\n\nfunction functionCallStart(...names) {\n  return [\n    NOT_A_DOT,\n    WORD_SEPARATOR,\n    alternatives(...names),\n    WHITESPACE,\n    LEFT_PARENTHESIS,\n    WHITESPACE\n  ];\n}\n\nconst BLOCK_COMMENT_RE = /\\/\\*[^]*?\\*\\//g;\nconst LINE_COMMENT_RE = /\\/\\/.*/g;\nconst REQUIRE_OR_DYNAMIC_IMPORT_RE = createRegExp(\n  [\n    ...functionCallStart('require', 'import'),\n    CAPTURE_STRING_LITERAL(1),\n    WHITESPACE,\n    OPTIONAL_COMMA,\n    RIGHT_PARENTHESIS\n  ],\n  'g'\n);\nconst IMPORT_OR_EXPORT_RE = createRegExp(\n  [\n    '\\\\b(?:import|export)\\\\s+(?!type(?:of)?\\\\s+)(?:[^\\'\"]+\\\\s+from\\\\s+)?',\n    CAPTURE_STRING_LITERAL(1)\n  ],\n  'g'\n);\nconst JEST_EXTENSIONS_RE = createRegExp(\n  [\n    ...functionCallStart(\n      'jest\\\\s*\\\\.\\\\s*(?:requireActual|requireMock|genMockFromModule|createMockFromModule)'\n    ),\n    CAPTURE_STRING_LITERAL(1),\n    WHITESPACE,\n    OPTIONAL_COMMA,\n    RIGHT_PARENTHESIS\n  ],\n  'g'\n);\n\nfunction extract(code) {\n  const dependencies = new Set();\n\n  const addDependency = (match, _, dep) => {\n    dependencies.add(dep);\n    return match;\n  };\n\n  code\n    .replace(BLOCK_COMMENT_RE, '')\n    .replace(LINE_COMMENT_RE, '')\n    .replace(IMPORT_OR_EXPORT_RE, addDependency)\n    .replace(REQUIRE_OR_DYNAMIC_IMPORT_RE, addDependency)\n    .replace(JEST_EXTENSIONS_RE, addDependency);\n  return dependencies;\n}\n"]},"metadata":{},"sourceType":"script"}